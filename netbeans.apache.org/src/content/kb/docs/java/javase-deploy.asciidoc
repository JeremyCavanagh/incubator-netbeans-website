//
//     Licensed to the Apache Software Foundation (ASF) under one
//     or more contributor license agreements.  See the NOTICE file
//     distributed with this work for additional information
//     regarding copyright ownership.  The ASF licenses this file
//     to you under the Apache License, Version 2.0 (the
//     "License"); you may not use this file except in compliance
//     with the License.  You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//     Unless required by applicable law or agreed to in writing,
//     software distributed under the License is distributed on an
//     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//     KIND, either express or implied.  See the License for the
//     specific language governing permissions and limitations
//     under the License.
//

//=============================================== The Title and Metadata (Start)

= Packaging and Distributing Java Desktop Applications
:jbake-type: tutorial
:jbake-tags: tutorials
:jbake-status: published
:reviewed: 2019-03-10
:syntax: true
:source-highlighter: pygments
:toc: left
:toc-title:
:icons: font
:description: Packaging and Distributing Java Desktop Applications - Apache NetBeans
:keywords: Apache NetBeans, Tutorials, Packaging and Distributing Java Desktop Applications

//================================================= The Title and Metadata (End)

//============================================================= Preamble (Start)

One question that a lot of beginning programmers have is: "Now that I've created my application in the IDE, how do I get it to work from the command line outside of the IDE." Similarly, someone might ask, "How do I distribute this application to other users without having to give them the whole IDE as well?"

The answers to these questions are relatively simple, but not necessarily obvious. This document addresses those questions by taking you through the basics of using the IDE to prepare your applications for distribution and deployment. In addition, this document provides information that you might need to configure your system (or which you might need to pass on to the users of your application). We will show a few different approaches for deploying an application, so that users can access the application by:

* Double-clicking the application's Java Archive (JAR) file.

* Calling the application from the command line.

* Calling the application from a script file.

NOTE: To complete this tutorial, you need the link:https://netbeans.org/projects/samples/downloads/download/Samples%252FJava%252FDeploymentTutorial.zip[+Deployment Tutorial source files+].

//=============================================================== Preamble (End)

//========================================= Creating Executable JAR File (Start)

== Creating an Executable JAR File

This part of the tutorial shows how you can create a distributable application in the IDE and then run that application from outside of the IDE. We will package the application in the form of an executable link:http://download.oracle.com/javase/tutorial/deployment/jar/run.html[+JAR+] file.

A JAR file is an archive file that can contain multiple files and folders. JAR files are similar to zip files, but JAR files can have additional attributes that are useful for distributing Java applications. These attributes include digitally signing JAR files, additional compression, multiplatform compatibility, etc.

In this exercise, you create an IDE project and then place two pre-written Java source files into that project. Then you will compile the classes and build an executable JAR file. Afterwards, you will learn how to run the JAR file from outside of the IDE.

The classes used in this tutorial implement features of the link:http://www.gnu.org/software/grep/[+GNU grep+] utility, which can be used for searching text or regular expression patterns inside text files. The project contains both command-line and GUI versions of the application, so that you can see different ways of running the application.

//==============================================================================

=== Creating a Project with Existing Sources

Download the file link:https://netbeans.org/projects/samples/downloads/download/Samples%252FJava%252FDeploymentTutorial.zip[+DeploymentTutorial.zip+] and extract its contents to a suitable location on your system. This zip archive contains source files for the application plus a few other files that will be used in the tutorial.

NOTE: The project folder does *_not_* have to be in the same location as the source files that you are importing into the project.

Open the New Project Wizard by selecting *File > New Project...* from the menu bar. On the *Choose Project* page, select: *Categories: Java* and *Projects: Java Project With Existing Sources* and click *Next >*.

On the *Name and Location* page, set *Project Name: `AnotherGrep`*. The project is automatically added to your default projects folder. If preferred, click *Browse...* to set an alternative location, click *Next >*.

On the *Existing Sources* page, you need to specify the sources that will be used in the project. Click the *Add Folder...* button and navigate to the folder `DeploymentTutorial > src`, and click *Open*. Finally click *Finish*,  the contents of the  folder `src` have been added to project *AnotherGrep*.

NOTE: If you want to exclude some source files from importing into the project, click *Next >* to open the *Includes:* & *Excludes:* page. In our case, we want to use all the source files in the `src` folder, so we clicked *Finish* to close the New Project wizard.

Open the *Projects* window and you will see the contents of `src` located at *AnotherGrep > Source Packages > anothergrep*, expanding this node reveals the  classes `Grep` and `xGrep`. The file `Grep.java` is a console version of the application. While the file `xGrep.java` is a GUI version of the application and uses methods defined in `Grep.java`.

//==============================================================================

=== Configuring the Project

There are a few configuration steps you need to do, such as:

* Select the *Java platform* that will be used to compile the sources and,

* Set the project's *main* class. By doing this, you ensure that the JAR file that is created when you build the project is *executable*.


==== Verifying the Java Platform and setting the Main Class

*Verifying the Java Platform*

Our project needs to be compiled and run on at least the Java SE 7 platform. Therefore, you need to make sure that an appropriate platform is set for this project. To do this, in the *Projets* window, right-click on the project node *AnotherGrep* and select *Properties*.

In the *Project Properties - AnotherGrep* window select *Categories: Libraries* and then set *Java Platform:*  to JDK 1.7 or, JDK 1.8 (or even JDK 11). Obviously, you must have the appropriate platform installed on your system.

Then select *Categories: Sources* and set *Source/Binary Format:* to JDK 7 or, to which ever JDK you selected for *Categories: Libraries*.

NOTE: The project does run perfectly well under JDK 11.

At this point do not close the *Project Properties - AnotherGrep* window.

*Setting the Main Class*

In order to make your JAR file runnable, either: by double-clicking the JAR file or, by typing `java -jar AnotherGrep.jar` at the command line, a *main* class must be specified inside the JAR's *manifest* file. The *manifest* is a standard part of the JAR file that contains information required by the `java` launcher so that the application will run. The *main* class serves as the entry point from where the `java` launcher runs your application.

To set the project's *main* class, in the currently open *Project Properties - AnotherGrep* window, select *Categories: Run* and enter `anothergrep.xGrep` in the *Main Class:* field or, click the *Browse...* button and select the appropriate main class from the list presented. The list only displays classes that contain a _main_ method. Finally, click the *OK* button to close the Project Properties dialog window.

When you build the project later in this tutorial, the manifest will be generated and include the following entry:

[source,java]
----

Main-Class: anothergrep.xGrep
----

//==============================================================================

=== Building the Project and Creating the JAR File

Now that you have your sources ready and your project configured, it is time to build your project. To do this, either: select *Run > Build Project (AnotherGrep)* from the menu bar or, right-click the *AnotherGrep* project node in the *Projects* window and select *Build*.

When you build your project, *build* and *dist* folders are added to your project folder, hereafter referred to as the _PROJECT_HOME_ folder. To verify that this has been done, select *Window >  Files* from the menu bar, you should see two folders: *AnotherGrep - Source Packages* and, *AnotherGrep*.

All of the source files are compiled into `.class` files and are placed into the folder *AnotherGrep > build > classes > anothergrep*.

The JAR file containing your project, *AnotherGrep.jar*, has been created inside the folder *AnotherGrep > dist*.

NOTE: If you specified any libraries for the project, other than the JDK, a *lib* folder would also be created in the *dist* folder. The libraries would then be copied into *AnotherGrep > dist > lib*.

The manifest file in the JAR is updated to include entries that designate the *main* class and any libraries that are on the project's classpath. You can inspect the contents of the manifest file by opening *AnotherGrep > dist > AnotherGrep.jar > META-INF > MANIFEST.MF*

To find more about manifest files, you can read link:http://java.sun.com/docs/books/tutorial/deployment/jar/manifestindex.html[+this chapter+] from the Java Tutorial.

//=========================================== Creating Executable JAR File (End)

//================================ Running and Distributing the JAR File (Start)

== Running and Distributing the JAR File

//==============================================================================

=== Running the Application Inside of the IDE

When developing applications in the IDE, typically, you will need to test and refine them before distribution. You can easily test your application by running it from within the IDE.

To run project *AnotherGrep* in the IDE, either: select *Run > Run Project (AnotherGrep)* from the menu bar or, right-click the *AnotherGrep* project node in the *Projects* window and select *Run*.

The *xGrep* window should open. You can enter the path to a file in the *FileName:* field or, click the *Browse...* button to select a file in which to search for a text pattern. In the *Search Pattern:* field, type text or a regular expression pattern that you would like to match, and click the *Search* button. The results of each match will appear in the xGrep window's *Output* pane.

Information on regular expressions that you can use in this application are available link:http://www.gnu.org/software/grep/manual/html_node/Regular-Expressions.html#Regular-Expressions[+here+] and many other places.

//==============================================================================

=== Running the Application Outside of the IDE

Once you have finished developing the application and before you distribute it, you will probably want to make sure that the application does work outside of the IDE.

You can run the application outside of the IDE by navigating to  *_PROJECT_HOME_ > AnotherGep > dist* in your system's file manager and double-click the file `AnotherGrep.jar`, you will see that the application has started successfully when the *xGrep* window opens.

If the *xGrep* window does not open, your system probably does not have a file association between JAR files and the Java Runtime Environment. See <<troubleshooting,Troubleshooting JAR File Associations>> below.

//==============================================================================

=== Distributing the Application to Other Users

Now that you have verified that the application works outside of the IDE, you are ready to distribute it. Quite simply, send the application's JAR file to the people who will use the application. The users should be able to run the application by double-clicking the JAR file. If this does not work for them, show them the information in the <<troubleshooting,Troubleshooting Tips - Specifying JAR File Associations>> section below.

NOTE: If your application depends on additional libraries, other than those included in JDK, you need to also include them in your distribution, this is not the case in our example. The relative paths to these libraries are added in the  `classpath` entry of the JAR's manifest file when you are developing your application in the IDE. If these additional libraries are not found at the specified classpath (i.e., relative path) at launch, the application will not start. Create a zip archive that contains the application JAR file and the library and provide this zip file to users. Instruct the users to unpack the zip file making sure that the JAR file and libraries JAR files are in the same folder. Run the application JAR file.

//================================== Running and Distributing the JAR File (End)

//======================================= Starting Your Java Application (Start)

== Starting Your Java Application

This exercise shows you how you can start a Java application in the following two ways:

* Running the  `java`  command from the command line.

* Using a script to a call a class in the JAR file.

//==============================================================================

=== Launching Applications From the Command Line

If you want to run an executable JAR file from the command line use the `java` command with the `-jar` option.

To run the *AnotherGrep* application, open a terminal window and navigate to the *_PROJECT_HOME_ > AnotherGrep > dist* folder and then type the following line to run the application's main class:

[source,java]
----

java -jar AnotherGrep.jar
----

NOTE: If the application does not run, you probably need to do one of the following things: include the full path to the `java` binary when you run the JAR file or, add the Java binaries to your PATH environment variable, so that you never have to specify the path to the `java` binary from the command line. See <<path,Setting the PATH Environment Variable>>.

//==============================================================================

=== Launching Applications From a Script

If the application that you want to distribute is a console application, you might find that it is convenient to start the application from a script, particularly if the application takes long and complex arguments to run.

In this section, you will use a console version of the *Grep* program, where you need to pass the arguments `file list` and `search pattern` to the JAR file, which will be invoked in our script.

First you need to change the main class in the application to the console version of the class and rebuild the JAR file.

In the IDE's *Projects* window, right-click the *AnotherGrep* project node and select *Properties* and in the Project Properties window select *Categories: Run* and change the Main Class property to  `anothergrep.Grep`. Click the *OK* button to close the Project Properties window.

Right-click the *AnotherGrep* project node again and select *Clean and Build*. The JAR file is rebuilt, and the  *Main-Class:*  attribute of the JAR file's manifest is changed to `anothergrep.Grep`.

==== link:http://www.gnu.org/software/bash/bash.html[+BASH+] script -- for UNIX and Linux machines

Inside the folder on your system where you extracted the contents of the link:https://netbeans.org/projects/samples/downloads/download/Samples%252FJava%252FDeploymentTutorial.zip[+DeploymentTutorial.zip+] file, there is a  `grep.sh`  bash script. Have a look at it:

[source,java]
----

#!/bin/bash
java -jar dist/AnotherGrep.jar $@
----

The first line states which shell should be used to interpret this. The second one executes your JAR file, created by the IDE inside the folder *AnotherGrep > dist*.  `$@`  just copies all given arguments, enclosing each inside quotes.

To execute the appropriate script, copy them from where you unpacked the DeploymentTutorial.zip file and add them to the *AnotherGrep* project file. Then you can run the scripts from your terminal application.

This script presumes that the Java binaries are part of your PATH environment variable. If the script does not work for you, see <<path,Setting the PATH Environment Variable>>.

More about bash scripting can be found link:http://www.gnu.org/software/bash/manual/bashref.html[+here+].

==== .bat script for Windows Systems

On Microsoft Windows systems, you can only pass nine arguments at once to a batch file. If there were more than nine arguments, you would need to execute the JAR file multiple times.

A script handling this might look like the following:

[source,java]
----

    @echo off
    set jarpath="dist/AnotherGrep.jar"
    set pattern="%1"
    shift
    :loop
      if "%1" == "" goto :allprocessed
      set files=%1 %2 %3 %4 %5 %6 %7 %8 %9
      java -jar %jarpath% %pattern% %files%
      for %%i in (0 1 2 3 4 5 6 7 8) do shift
    goto :loop

    :allprocessed

----

This script is included as  `grep.bat`  inside the folder on your system where you extracted the contents of the link:https://netbeans.org/projects/samples/downloads/download/Samples%252FJava%252FDeploymentTutorial.zip[+DeploymentTutorial.zip+] file so you can try it out.

The nine arguments are represented inside the batch file by `%<ARG_NUMBER>`, where `<ARG_NUMBER>` has to be inside `<0-9>`, `%0` is reserved for the script name.

You can see that only nine arguments are passed to the program at a time in a single loop. The `for` statement just shifts the arguments by nine, to prepare for next loop. Once an empty file argument is detected by the `if` statement, there are no further files to process and, the loop is ended.

More about batch scripting can be found on link:http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/batch.mspx[+this page+].

//========================================= Starting Your Java Application (End)

//================================================= Troubleshooting Tips (Start)

== Troubleshooting Tips

//==============================================================================

=== Specifying JAR File Associations

On most systems, you can run an executable JAR file by simply double-clicking on the JAR file. If nothing happens when you double-click the JAR file, it might be because of either of the following two reasons: the JAR file type is probably not associated with a Java Runtime Environment (JRE) on your system or, the JAR file type is associated with the JRE, but the `-jar` option is not included in the command that is passed to the JRE when you double-click the icon.

If the JAR file type is associated with a JRE, the icon that represents that file should include a Java logo.

NOTE: Sometimes JAR file associations are switched by software that you install, such as software to handle zip files.

The way how you associate the JAR file type with the `java` launcher depends on your operating system.

NOTE: Make sure that there is a version of the JRE installed on your system. You should use version 1.4.2 or later. You cannot launch a Java application if no Java is installed. If you have the JDK installed, you also get the JRE. However, if you are distributing the program to a non-programmer, that person does not necessarily have either the JRE or the JDK.

* On Windows XP, you can check for installed versions of Java by choosing `Start > Control Panel > Add or Remove Software`. You should see, for example, Java(TM) 7 Update 51.

* On Windows Vista or 7, you can check for installed versions of Java by choosing `Start > Control Panel > Programs and Components`. You should see, for example, Java(TM) 7 Update 51.

If there is no Java on the system, you can get the JRE one from the link:http://www.oracle.com/technetwork/java/javase/downloads/index.html[+Java SE download site+].

If you have Java installed on your system, but the file association is not working, continue with the steps for adding the JAR file association on Microsoft Windows:

* Choose `Start > Control Panel`.

* Applicable to Windows Vista only, click `Control Panel Home > Programs`.

* For Windows XP, double-click `Folder Options` and select the `File Types` tab. For Windows Vista or 7, click `Default Programs` and select `Associate a file type or protocol with a program`.

* In the `Registered File Types` list, select `JAR` File.

* On Windows XP, in the `Details` section of the dialog box, click `Change Program`.

* In the `Open With` dialog box, select `Java Platform SE Binary`.

* Click `OK` to exit the `Open With` dialog box.

* Click `Close` to exit the `Folder Options` dialog box on Windows XP or, the `Associate a file type or protocol with a specific program` dialog box on Windows 7.

NOTE: If JAR files are associated with the Java Platform SE Binary on your system but double-clicking still does not execute the file JAR file, you might need to specify the  `-jar`  option in the file association.

To specify the  `-jar`  option in the file association on Microsoft Windows XP:

* Choose `Start > Control` Panel.

* For Windows XP, double-click `Folder Options` and select the `File Types` tab.

* In the `Registered File Types` list, select `JAR` File.

* In the `Details` section of the dialog box, click `Advanced`.

* In the `Edit File Type` dialog box, click `Edit`.

* In the `Application Used to Perform Action` text field, add the following at the end of the path to the JRE:

[source,java]
----

 -jar "%1" %*
----
Afterwards, the field should contain text similar to the following:

[source,java]
----

"C:\Program Files\Java\jre1.7.0_51\bin\javaw.exe" -jar "%1" %*
----
* Click `OK` to exit the `Editing Action` for `Type` dialog box.

* Click `OK` to exit the `Edit File Type` dialog box.

* Click `Close` to exit the `Folder Options` dialog box.

NOTE: Starting with Windows Vista advanced file associations can be set via RegEdit. See the link:http://technet.microsoft.com/en-us/magazine/ee914604.aspx[+What Happened to the File Types Dialog?+] article for details.

For UNIX and Linux systems, the procedure for changing file associations depends on which desktop environment, such as GNOME or KDE, that you are using. Look in your desktop environment's preference settings or consult the documentation for the desktop environment.

//==============================================================================

=== Setting the PATH Environment Variable

If you can not run a Java class or JAR file on your system without pointing to the location of the JDK or JRE on your system, you might need to modify the value of your system's  `PATH`  variable.

If you are running on a Microsoft Windows system, the procedure for setting the PATH variable depends the version of Windows you are using.

The following are the steps for setting the  `PATH`  variable on a Windows XP system:

* Choose `Start > Control Panel` and double-click `System`.

* In the `System Properties` dialog box, click the `Advanced` tab.

* Click the `Environment Variables` tab.

* In the list of user variables, select `PATH` and click `Edit`.

* Add the location of the JRE to the end of the list of paths. The locations in this list are separated by semicolons (;).
For example, if your JRE is located at `C:\Program Files\Java\jdk1.7.0_51` you would add the following to the end of the PATH variable:

[source,java]
----

C:\Program Files\Java\jdk1.7.0_51\bin
----

* Click `OK` to exit the `Environment Variables` dialog box, and click `OK` to exit the `System Properties` dialog box.

If you are running on a UNIX or Linux system, the instructions for modifying your PATH variable depends on the shell program you are using. Consult the documentation of the shell that you are using for more information.

//=================================================== Troubleshooting Tips (End)
