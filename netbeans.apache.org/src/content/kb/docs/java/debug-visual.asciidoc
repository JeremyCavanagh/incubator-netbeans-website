//
//     Licensed to the Apache Software Foundation (ASF) under one
//     or more contributor license agreements.  See the NOTICE file
//     distributed with this work for additional information
//     regarding copyright ownership.  The ASF licenses this file
//     to you under the Apache License, Version 2.0 (the
//     "License"); you may not use this file except in compliance
//     with the License.  You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//     Unless required by applicable law or agreed to in writing,
//     software distributed under the License is distributed on an
//     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//     KIND, either express or implied.  See the License for the
//     specific language governing permissions and limitations
//     under the License.
//

//[cols="1,4"]
//|===
//|*Windows*/*Linux* |kbd:[]
//|*macOS* |kbd:[]

//=============================================== The Title and Metadata (Start)

= Using the Visual Debugger in the NetBeans IDE
:jbake-type: tutorial
:jbake-tags: tutorials
:jbake-status: published
:reviewed: 2019-03-11
:icons: font
:syntax: true
:source-highlighter: pygments
:toc: left
:toc-title:
:description: Using the Visual Debugger in NetBeans IDE - Apache NetBeans
:keywords: Apache NetBeans, Tutorials, Using the Visual Debugger in NetBeans IDE

//================================================= The Title and Metadata (End)

//============================================================= Preamble (Start)

This document describes how to use the Visual Debugger to help you locate and debug the code for visual elements in your GUI applications. You can use the visual debugger in both Java and JavaFX GUI applications.

In this document you will use the Visual Debugger to explore the *AnagramGame* sample project. This document will demonstrate how to take a GUI snapshot of the application and then work with the snapshot to locate source code, add listeners to events and view the event log of GUI components.

//=============================================================== Preamble (End)

//================================================ Taking a GUI Snapshot (Start)

== Taking a GUI Snapshot

In this tutorial you will use the *AnagramGame* sample application, a Java desktop application with a simple GUI that is available as a sample in the *New Project* wizard. To open the *New Project* wizard, press:

[cols="1,4"]
|===
|*Windows*/*Linux* |kbd:[Ctrl+Shift+N]
|*macOS* |kbd:[Command+Shift+N]
|===

or, select *File > New Project...* from the menu bar or, right-click in the *Projects* window and select *New Project...* .

In the *New Project* window, select *Categories: Samples > Java* and *Projects: AnagramGame*, click the *Next >* button. The project is automatically added to your _NetBeans_Projects_ folder, click the *Browse...* button to select an alternative location, if preferred. Finally, click the *Finish* button, the project is created and opens in the *Projects* window.

Now that you have a new project, you can start a debugging session and take GUI snapshots of the application. To start a debugging session, press: kbd:[Ctrl+F5] or, select *Debug > Debug Project (AnagramGame)* from the menu bar or, right-click in the *Projects* window and select *Debug Project (AnagramGame)*

When you start the session, the IDE will launch the *Anagrams* game and open the *Debugging* window. To take a GUI snapshot, select *Debug > Take GUI Snapshot* from the menu bar. The IDE will take a snapshot of the GUI and will open the snapshot in the main window.

image::images/debug-fullscreen.png[link="images/debug-fullscreen.png"]

In this guide to the visual debugger, we will not be using the *Debugging* window. For more information on running the debugger, see link:http://www.oracle.com/pls/topic/lookup?ctx=nb8000&id=NBDAG798[+About Running and Debugging Java Application Projects+] specifically _Section 9.8, Debugging Applications_ in _Developing Applications with NetBeans IDE_.


//================================================== Taking a GUI Snapshot (End)

//===================================== Working with the Visual Debugger (Start)

== Working with the Visual Debugger

The source code for GUI components can sometimes be difficult to locate. The `snapshot` provides a way for you to locate the code based on the _GUI component_ rather than searching through the source code.

You can select components in the snapshot and invoke tasks from a pop-up menu to view: the source code for the component or, show the listeners and, set breakpoints on components.

//==============================================================================

=== Locating the Source Code for Components

When you select a component in the snapshot, the IDE displays details about the selected component in the *Properties* window and,

image::images/debug-snapshot.png[]

how the component fits within the GUI hierachy in the *Navigator* window.

image::images/debug-navigator.png[]

If the *Properties* or *Navigator* windows are not visible they can be opened by selecting either:  *Window > Properties* or *Window > Navigator* from the menu bar.

NOTE: If you right-click a component, you can select *Properties* directly from the pop-up dialog and a new floating *Properties* window specific to the GUI component you selected opens in the centre of the screen regardless of whether or not there is already an open *Properties* window.

You can select a GUI component from either: the *Snapshot* window or, the *Navigator* window, in either case the component is highlighted in both windows. If you right-click on a component in either of these windows, a pop-up is displayed containing a variety of navigational and debugging options.

If, for example, you right-click the *Guess* button in the *Snapshot of "Anagrams"* window and select *Go to Component Declaration* from the pop-up menu. The IDE opens the source code in the editor and highlights the code where the `guessButton` component is declared.

image::images/debug-gotodeclaration.png[]

Right-click the *Guess* button in the *Snapshot of "Anagrams"* window again and, this time select *Go to Component Source*, the source code for the `JButton` component is dislayed and highlighted in the editor.

image::images/debug-gotosource.png[]

In each case, complimentary information is displayed about the GUI component in the *Navigator* window.

// THIS NEXT SECTION DOESN'T SEEM TO WORK - If it does work (which I never discovered) it takes an inordinate amount of processing, my system practically locks up! Also, the IDE has changed significantly and I don't think this functionality is set in Options/Preferences any more. Plus NetBeans 7.1 is rather old.

//You can use the Go to Hierarchy Addition command in the GUI snapshot to locate the line in the source code where a component is added to its container. The Go to Hierarchy Addition command is disabled by default. You can enable the command in the Options window.

//1. Open the Options window.

//2. Click the Java Debugger tab in the Java category in the Options window.

//NOTE: In NetBeans IDE 7.1 the Java Debugger tab is located in the Miscellaneous category in the Options window.

//3. Select Visual Debugging in the list of categories and select *Track locations of component hierarchy changes*. Click OK.

//4. Stop your debugging session (if one is running).

//NOTE: After you enable the command in the Options window you will need to restart your debugging session and take a new GUI snapshot before you can use the Go to Hierarchy Addition command.

//5. Start a new debugging session and take a GUI snapshot.

//6. Right-click a component in the GUI snapshot and choose Go to Hierarchy Addition.

//The IDE will open the source code in the editor at the line where the component is added.

//image::images/debug-hierarchy.png[title="Line of source code where component is added to container"]

//==============================================================================

=== Exploring Component Events

You can use the GUI snapshot and the *Events* window to explore component events, enabling you to locate component listeners and, the events that are triggered by the components.

To open the *Events* window, right-click the *Guess* button in the *Snapshot of "Anagrams"* window and select *Show Listeners* from the pop-up menu. When you choose *Show Listeners*, the IDE opens the *Events* window and expands the *Custom Listeners* node.

image::images/debug-customlisteners.png[]

If you now right-click *com.toy.anagrams.ui.Anagrams$3* under the *Custom Listeners* node and select *Go to Component Source* in the popup menu. The source code is opened in the editor and the line where the listener is defined is highlighted.

Now select the empty text field next to *Your Guess:* in the *Snapshot of "Anagrams"* window or, select the `guessedWord [JTextField]` in the Navigator window. When you select the text field, the items in the *Events* window will change automatically to display the listeners for the selected component.

In the *Events* window, right-click the *Event Log* node and select *Set Logging Events...* or, double-click the *Event Log* node, to open the *Select Listener* window. Select the checkbox for `java.awt.event.KeyListener` in the dialog and click the *OK* button.

image::images/debug-select-listener.png[]

This listener is now listening for keyboard events in the text field. If you now type some characters in the *Your Guess:* text field of the running *Anagrams* game, the keystrokes are recorded in the events log. Expanding the *Event Log* node reveals that each keystroke has been logged. New events will appear each time you type in this text field.

If you expand an individual keystroke event, for example `keyPressed (java.awt.event.KeyEvent)`, you can see the properties for that event in the log. If you now expand the *Called From...* node for this event you can see the corresponding stack trace.

image::images/debug-eventlog.png[]

Finally, select *Debug > Finish Debugger Session* from the menu bar, to stop the debugger.

//======================================= Working with the Visual Debugger (End)

//============================================================== Summary (Start)

== Summary

This tutorial was a basic introduction to the visual debugger in the IDE. The visual debugger enables you to easily locate the source code and log events for GUI components. This can be extremely helpful when you are debugging GUI applications.

//================================================================ Summary (End)
