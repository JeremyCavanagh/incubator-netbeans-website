//
//     Licensed to the Apache Software Foundation (ASF) under one
//     or more contributor license agreements.  See the NOTICE file
//     distributed with this work for additional information
//     regarding copyright ownership.  The ASF licenses this file
//     to you under the Apache License, Version 2.0 (the
//     "License"); you may not use this file except in compliance
//     with the License.  You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//     Unless required by applicable law or agreed to in writing,
//     software distributed under the License is distributed on an
//     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//     KIND, either express or implied.  See the License for the
//     specific language governing permissions and limitations
//     under the License.
//

//=============================================== The Title and Metadata (Start)

= Refactoring with Inspect and Transform in the NetBeans IDE Java Editor
:jbake-type: tutorial
:jbake-tags: tutorials
:jbake-status: published
:reviewed: 2019-03-05
:syntax: true
:source-highlighter: pygments
:toc: left
:toc-title:
:icons: font
:description: Refactoring with Inspect and Transform in the NetBeans IDE Java Editor - Apache NetBeans
:keywords: Apache NetBeans, Tutorials, Refactoring with Inspect and Transform in the NetBeans IDE Java Editor

//================================================= The Title and Metadata (End)

//============================================================= Preamble (Start)

The NetBeans IDE Java Editor features an *Inspect and Transform...* feature, which is a refactoring tool that allows you to run various inspections and transformations on the selected scope of your code.

It enables you to run either a single inspection or, a collection of inspections known as a configuration. What makes this feature even more useful is, that it also allows you to define any manner of custom inspections to best suit your specific needs.

In this tutorial, you will learn how to perform a code review using inspections with refactoring and predefined sets of inspections, manage configurations and, create custom inspections.

//=============================================================== Preamble (End)

//================================== Setting Up the Tutorial Environment (Start)

== Setting Up the Tutorial Environment

For this tutorial you will need to download the file link:https://netbeans.org/projects/samples/downloads/download/Samples/Java/inspecttransform.zip[+InspectTransform.zip+] and, unzip it into your NetBeans project folder.

To open the *InspectTransform* project, press:

//NOTE: *** Not sure if this is the correct windows key combo?

[cols="1,4"]
|===
|*Windows*/*Linux* |kbd:[Ctrl+Shift+O]
|*macOS* |kbd:[Command+Shift+O]
|===

or, select *File > Open Project...* from the menu bar or, in the *Projects* window right-click and select *Open Project...* . If you then expand all the nodes of project *InspectTransform*, it will appear as shown below:

image::images/proj.png[]

//==================================== Setting Up the Tutorial Environment (End)

//================================================== Running Inspections (Start)

== Inspections

Inspections can be either: specific and focus on a single aspect or, grouped as in a configuration. First, we shall look at a single inspection. The *Refactor > Inspect and Transform* feature offers a wide variety of inspections related to specific refactoring transformations, the complete list can be seen in the *Manage Inspections* dialog window.

image::images/manage-inspections-small.png[link="images/manage-inspections.png"]

The *Search:* field enables you to check if a required inspection is currently available using a keyword lookup. For example, there are several inspections found when `operator` is searched for.

image::images/search-small.png[link="images/search.png"]

Every inspection is provided with a description available in the *Description:* field in the *Manage Inspections* dialog window.

*To run and apply an existing Inspection:*

In the *Projects* window, select the file `InspectTransform.java` and then select *Refactor > Inspect and Transform* from the menu bar. In the *Inspect and Transform* dialog window, select the *Single Inspection:* radio button and click the *Browse...* button, you are then presented with the *Manage Inspections* window. From the available options, select *Inspections: `Assignment replaceable with operator-assignment`* and, click the *OK* button to return to the *Inspect and Transform* dialog window. Finally, click the *Inspect* button.

You are presented with the *Refactoring* window, from which you can see the proposed refactoring against your original code. Click the *Do Refactoring* button to apply the required changes.

<<top,top>>

//==================================================== Running Inspections (End)

//================================================= Using Configurations (Start)

== Configurations

A set of grouped refactorings constitutes a configuration that can be run on your scope of interest i.e., a class, several classes, packages or, projects.

The IDE offers the following predefined configurations:

* <<migrate5,Migrate to JDK 5>>
* <<convert,Migrate to JDK 7>>
* <<migrate8,Migrate to JDK 8>>
* <<organize,Organize Imports>>

NOTE: Not all releases of the JDK introduce new language features.

//==============================================================================

=== Migrate to JDK 5

The `Migrate to JDK 5` configuration incorporates, by default, such refactoring operations as: static imports, JDK 5 for-loop usage, unnecessary boxing and unboxing and, switch over Strings application.

image::images/jdk5-conf-small.png[link="images/jdk5-conf.png"]

//==============================================================================

=== Migrate to JDK 7

The  `Migrate to JDK 7`  configuration incorporates, by default, such refactoring operations as: diamond operator usage, try-with-resources conversion, multicatch usage, switch over Strings application and, others.

image::images/jdk7-conf-small.png[link="images/jdk7-conf.png"]

//==============================================================================

=== Migrate to JDK 8

The  `Migrate to JDK 8`  configuration incorporates, by default, such refactoring operations as: Lambda or Member Reference conversion, static imports, multicatch usage, switch over Strings application, and others.

image::images/jdk8-conf-small.png[link="images/jdk8-conf.png"]

NOTE: The list of refactorings in *Configurations:* can be modified in the *Inspections:* list of the *Manage Inspections* dialog window by selecting and/or deselecting the items under the  `JDK Migration Support`  node.

*To run and apply one of the default configurations, for example, `Migrate to JDK 8`:*

In the *Projects* window, select the file `PredefinedSet.java` and select *Refactor > Inspect and Transform* from the menu bar. In the *Inspect and Transform* dialog box, select the *Configuration:* radio button and choose the  `Migrate to JDK 8` option from the drop-down list. Finally, click the *Inspect* button.

Changes that would convert the code to JDK 8 syntax are shown in the preview panel. Click the *Do Refactoring* button to apply the changes.

//==============================================================================

=== Organize Imports

The  `Organize Imports`  configuration, unsurprisingly, enables you to inspect the way import statements are organized in your code and, refactor them as desired. By default, it includes a single inspection that checks whether import statements correspond to the specified code style rules.

NOTE: To configure the code style rules for import statements refer to: link:editor-codereference.html[+Code Formatting+] for more information.

*To run and apply the default  `Organize Imports` configuration:*

From the *Projects* window, select the `Imports.java` file and select *Refactor > Inspect and Transform* from the menu bar. In the *Inspect and Transform* dialog window, select the *Configuration:* radio button and choose `Organize Imports` from the drop-down list. Finally click the *Inspect* button.

The preview panel displays one occurrence proposed for the `import` section of file `Imports.java` to align it with the specified code style rules.

image::images/imports-ref-small.png[link="images/imports-ref.png"]

Click the *Do Refactoring* button to apply the changes.

NOTE: Depending upon your personal settings for `Code Formatting`, you may not see the same refactoring as shown above.

<<top,top>>

//=================================================== Using Configurations (End)

//============================================== General Editor Features (Start)

== Custom Inspections

A custom inspection can be created to instruct the IDE what code structures are to be found and how to transform them.

NOTE: To avoid adding a duplicate inspection to the IDE, choose *Refactor > Inspect and Transform* from the menu bar, click either *Manage...* or *Browse...*, and, in the *Manage Inspections* dialog window, use the *Search:* field to look for the required inspection prior to creating a new inspection.

*To create a custom inspection:*

Select *Refactor > Inspect and Transform* from the menu bar. In the *Inspect and Transform* dialog window: select the *Confuration:* radio button and click the *Manage...* button for a custom configuration or, select the *Single Inspection:* radio button and click the *Browse...* button for a custom single inspection. Then in the Manage Inspections dialog box, click the *New* button, a `Custom > Inspection` node is created in the *Inspections:* list.

image::images/custom-hint-small.png[link="images/custom-hint.png"]

Ideally, you should give your custom `Inspection` a meaningful name, to do so right-click on the `Custom > Inspection` node and choose *Rename* from the pop-up menu. Enter a suitable name and then press kbd:[Enter].

Click the *Edit Script* button and the *Script:* text area is displayed. Type the description and code for your custom inspection in the text area.

image::images/script-small.png[link="images/script.png"]

Alternatively, click *Open in Editor* and specify the same in the  `Inspection.hint`  file.

image::images/hint-file-small.png[link="images/hint-file.png"]

Click the *Save* button below the *Script:* text area or, select *File > Save* in the Editor to save your edits. Click *OK* to close the *Manage Inspections* dialog window or, close the `Inspection.hint` file in the Editor.

Your custom inspection is done and ready to be applied.

*To run the custom inspection you created:*

Choose *Refactor > Inspect and Transform* from the menu bar.

In the *Inspect:* list of the *Inspect and Transform* dialog window, specify a file, package, or project(s) to be inspected. Alternatively, click the ( *...* ) button to define a custom scope in the *Custom Scope* dialog window.

Select the *Single Inspection:* radio button and choose your *Custom > Inspection* from the drop-down list.

image::images/mycustomhint-small.png[link="images/mycustomhint.png"]

Click the *Inspect* button and your defined refactoring changes are displayed in the preview panel of the *Refactoring* window finally, click the *Do Refactoring* button to apply your changes.

<<top,top>>

//=============================================================== Preamble (End)

//============================================== General Editor Features (Start)

== Summary

This tutorial covered the most frequent usages of the Inspect and Transform feature. Note that with the Inspect and Transform functionality, you can also perform custom refactoring at project scope or, apply particular refactoring configurations to several projects open in the IDE, etc.

//=============================================================== Preamble (End)

<<top,top>>
